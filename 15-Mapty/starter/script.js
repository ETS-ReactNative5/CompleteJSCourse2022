'use strict';

// prettier-ignore
const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

// Selector
const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

///////////////////////////////////////////////////

// Using the Geolocation API

// let map, mapEvent;
// if (navigator.geolocation)
//   // the Navigator.geolocation read-only property returns a Geolocation object that gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.
//   // navigator --(window object) interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.

//   navigator.geolocation.getCurrentPosition(
//     function (position) {
//       // console.log(position);
//       const { latitude } = position.coords; // we simply use destructuring then create a variable called latitude based out of the latitude property of this object
//       const { longitude } = position.coords;
//       // console.log(latitude, longitude); //

//       console.log(`https://www.google.com/maps/@${latitude},${longitude}`); // coords of current location

//       const coords = [latitude, longitude];

//       // Displaying a Map using Leaflet Library
//       map = L.map('map').setView(coords, 13); // map()method --The central class of the API — it is used to create a map on a page and manipulate it and we pass in the map method must be the ID name of an element in HTML -- L here this is basically the main function that Leaflet gives us as an entry point. Its kinda of namespace and L in the browser consle is a global variable inside of the script of leaflet that we then can access from all the other scripts. // the map variable here is an object generated by a leaflet (L) --therefore it is a special object with couple of methods and properties
//       // set its view to our chosen geographical coordinates and a zoom level
//       console.log(map); // show internals of the leaflet library

//       L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
//         attribution:
//           '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
//       }).addTo(map); // tiles --squares bitmap graphics -typically 256×256 pixels- images displayed in a grid arrangement to show a map || tileLayer()--used to display tile layers on the map --define the tiles of our map
//       //  first select a title layer and then we add that tile layer to the map again, using .addTo()

//       // NOTE: Tile layers display image tiles served from a tile server. A tile layer is a set of web-accessible tiles that reside on a server. The tiles are accessed by a direct URL request from the web browser.

//       // Displaying Map Marker
//       // --handling clicks on map
//       map.on('click', function (mapE) {
//         mapEvent = mapE;
//         form.classList.remove('hidden');
//         inputDistance.focus();
//       }); // here we attached an eventlistener --this method is not coming from JS itself, instead of coming from the leaflet library. -- just like in standard JavaScript, we get access to an event, but this one is an event created by leaflet.So let's just call it mapEvent.

//       // NOTE: on method registers a handler, which is callback function with specific signature. Once an event is triggered, a handler is called. It receives necessary data as function parameters (commonly event object). --The on() method attaches one or more event handlers for the selected elements and child elements
//     },
//     function () {
//       alert('Could not get your position');
//     }
//   ); // navigator.geolocation --1st argument: callback function that will be called on success wheneveer the browser successfully got the coordinates of the current position of the user 2nd argument: is the error callback which is the one that is gonna be called when error happened while getting the coordinates

// // Rendering workout form
// form.addEventListener('submit', function (e) {
//   e.preventDefault();

//   // clear input fields
//   inputDistance.value =
//     inputDuration.value =
//     inputCadence.value =
//     inputElevation.value =
//       '';

//   // Display marker
//   console.log(mapEvent);
//   const { lat, lng } = mapEvent.latlng;

//   L.marker([lat, lng]) // marker --used to display clickable/draggable icons on the map and passes coordinates (render a map on our page with the coordinates)
//     .addTo(map) // method that adds to the map
//     .bindPopup(
//       L.popup({
//         maxWidth: 250,
//         minWidth: 100,
//         autoClose: false,
//         closeOnClick: false,
//         className: 'running-popup', //can use to assign any CSS className to style
//       })
//     ) // create a popup and bind it to the marker --simply pass a string
//     .setPopupContent('Workout')
//     .openPopup();
// });

// inputType.addEventListener('change', function () {
//   inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
//   inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
// });
// use if statement --to make sure we dont get any errors in an old browser, we can test if (navigation.geolocation) actually exists

// console.log(firstName); //  first name variable is a global variable here in this script. any variable that is global in any script will be available to all the other scripts while as long as they appear after that script here included in the HTML. So script.js has access to all the global variables in othe.js when other.js and leaflet.js but for example, other.js does not have access to anything from script.js because it appears afterwards
////////////////////////////////////////////////////////////

// Refractorung for Project Architecture
class App {
  #map;
  #mapEvent;
  constructor() {
    this._getPosition();

    // Rendering workout form
    form.addEventListener(
      'submit',
      this._newWorkout.bind(this) // TIP: always bind the callback function in an event handler --event handler callback function will always have the this keyword in the DOM element (form)
    ); // NOTE: JavaScript events are bound to the document object model (DOM) and aren't bound to any arbitrary object you might make. --attach the eventListener to the DOM elements here in the constructor

    inputType.addEventListener('change', this._toggleElevationField);
  } //constructor method is called immediately when new object is created from this class

  _getPosition() {
    // Display current positon(coordinates)
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this), // this keyword passed on the bind method points to the current object (class App)--_loadMap method called by _getCurrentPosition method here and treated as regular function call not method call --regular function this keyword is undefined
        function () {
          alert('Could not get your position');
        }
      );
  }

  // just a blueprint --we need to create an actual object out of the App class
  _loadMap(position) {
    console.log(position);
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(latitude, longitude); //

    console.log(`https://www.google.com/maps/@${latitude},${longitude}`); // coords of current location

    const coords = [latitude, longitude];

    this.#map = L.map('map').setView(coords, 13);
    console.log(this.#map);

    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    // Displaying Map Marker
    // --handling clicks on map
    this.#map.on('click', this._showForm.bind(this)); // same as event hanlders --this keyword is attached to the map library event itself (whom we attached the event handlers)
  }

  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _toggleElevationField() {
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
  }

  _newWorkout(e) {
    e.preventDefault();

    // clear input fields
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        '';

    // Display marker
    // console.log(mapEvent);
    const { lat, lng } = this.#mapEvent.latlng;

    L.marker([lat, lng])
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: 'running-popup',
        })
      )
      .setPopupContent('Workout')
      .openPopup();
  }
}

const app = new App();
// app._getPosition(); // all code in top level scope --outside of any function will get executed immediatelt as the script loads

// NOTE: when calling function in an event handlers and in callback, the function will simply be called a regular function and regular function this keyword is undefined
